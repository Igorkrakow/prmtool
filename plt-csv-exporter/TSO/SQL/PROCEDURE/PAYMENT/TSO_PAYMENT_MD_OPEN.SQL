CREATE or replace PROCEDURE TXSTORE.TSO_PAYMENT_MD_OPEN(start_time TIMESTAMP, end_time TIMESTAMP)
    LANGUAGE SQL
BEGIN
    DECLARE SQLCODE INT DEFAULT 0;
    DECLARE V_SQLCODE INT DEFAULT 0;

    DECLARE V_I INTEGER;
    DECLARE V_START_DRAW_NUMBER INTEGER;
    DECLARE V_END_DRAW_NUMBER INTEGER;


    DECLARE V_LOTTERY_TX_HEADER_ID BIGINT;
    DECLARE V_GLOBAL_TRANS_ID VARCHAR(50);
    DECLARE V_SERIAL BIGINT;
    DECLARE V_CDC INTEGER;
    DECLARE V_PLAYER_ID BIGINT;
    DECLARE V_LAST_DRAWNUMBER INTEGER;


    DECLARE V_COUNT_COMMIT BIGINT;


    DECLARE MIGRATED_TX_CURSOR CURSOR WITH HOLD FOR
SELECT
    LTHW.START_DRAW_NUMBER,
    LTHW.END_DRAW_NUMBER,
    LTHW.LOTTERY_TX_HEADER_ID,
    LTHW.GLOBAL_TRANS_ID,
    LTHW.SERIAL,
    LTHW.CDC,
    THW.PLAYER_ID,
    TXSTORE.LAST_CLOSED.DRAWNUMBER
FROM TXSTORE.LOTTERY_TX_HEADER LTHW
         JOIN TXSTORE.TX_HEADER THW ON THW.TX_HEADER_ID = LTHW.LOTTERY_TX_HEADER_ID
    AND LTHW.LOTTERY_TRANSACTION_TYPE = 'WAGER'
    AND TRANSACTION_TIME_LOCAL >= start_time AND TRANSACTION_TIME_LOCAL < end_time

         JOIN GIS.DGGAME ON LTHW.PRODUCT = GIS.DGGAME.HOSTPRODUCTNUMBER

-- Closed wagers only
         JOIN TXSTORE.LAST_CLOSED ON GIS.DGGAME.IDDGGAME = TXSTORE.LAST_CLOSED.IDDGGAME
    AND END_DRAW_NUMBER > TXSTORE.LAST_CLOSED.DRAWNUMBER
     -- Only migrate allowed player IDs
--JOIN PAM_CMD.SMS_CONTRACT_MIGRATION ON CONTRACT_IDENTITY = TXSTORE.TX_HEADER.PLAYER_ID

--where LOTTERY_TX_HEADER_ID not in (select WAGER_TRANSACTION_ID from TXSTORE.TMP_TSO_REFUND)
     --MD WAGER
WHERE START_DRAW_NUMBER != END_DRAW_NUMBER;

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, NOT FOUND, SQLWARNING
        SET V_SQLCODE = SQLCODE;
OPEN MIGRATED_TX_CURSOR;
CALL SYSIBMADM.DBMS_OUTPUT.PUT_LINE('Open and start reading the "TSO_PURCHASE_CURSOR" cursor.');
FETCH MIGRATED_TX_CURSOR INTO V_START_DRAW_NUMBER,V_END_DRAW_NUMBER,V_LOTTERY_TX_HEADER_ID,
    V_GLOBAL_TRANS_ID,V_SERIAL,V_CDC,V_PLAYER_ID,V_LAST_DRAWNUMBER;

SET V_COUNT_COMMIT = 1;
    WHILE (V_SQLCODE = 0)
        DO
         IF(V_START_DRAW_NUMBER < V_LAST_DRAWNUMBER) THEN
             INSERT INTO TXSTORE.TMP_TSO_OPEN_PAYMENT_TRANSACTION (TRANSACTION_ID,CHECK_DRAW_FROM,SD_OR_MD)
             VALUES (V_LOTTERY_TX_HEADER_ID,V_START_DRAW_NUMBER,2);
         ELSE

            SET V_I = V_START_DRAW_NUMBER;
            WHILE (V_I <= V_LAST_DRAWNUMBER)
                DO
                --SET V_LIST = V_LIST||'('||V_I||','||V_LOTTERY_TX_HEADER_ID||')';
                --IF(V_I != V_END_DRAW_NUMBER) THEN SET V_LIST = V_LIST || ','; END IF ;
                    INSERT INTO TXSTORE.TMP_TSO_PAYMENT (transaction_id,
                                                         player_id,
                                                         status,
                                                         DRAW,
                                                         transaction_date,
                                                         uuid,
                                                         product,
                                                         amount,
                                                         global_trans_id,
                                                         start_date_run,
                                                         end_date_run,
                                                         start_date_update,
                                                         end_date_update,
                                                         delta)
SELECT WAG.LOTTERY_TX_HEADER_ID,
       THW.PLAYER_ID,
       CASE WHEN NVL(VAL.TRANSACTION_AMOUNT,0)   > 0
                THEN 'WINNING'
            ELSE 'LOSER' END,
       V_I,
       CASE WHEN VAL.TRANSACTION_TIME_LOCAL IS NULL THEN WAG.TRANSACTION_TIME_LOCAL
            ELSE VAL.TRANSACTION_TIME_LOCAL END,
       CASE WHEN VAL.UUID IS NULL THEN THW.UUID
            ELSE VAL.UUID END,
       WAG.PRODUCT,
       NVL(VAL.TRANSACTION_AMOUNT,0),
       WAG.GLOBAL_TRANS_ID,
       start_time,
       end_time,
       start_time,
       end_time,
       'i' FROM TXSTORE.LOTTERY_TX_HEADER WAG
                    JOIN TXSTORE.TX_HEADER THW ON WAG.LOTTERY_TX_HEADER_ID = THW.TX_HEADER_ID
                    LEFT JOIN (SELECT * FROM TXSTORE.LOTTERY_TX_HEADER LTHV JOIN TXSTORE.TX_HEADER THV ON LOTTERY_TX_HEADER_ID = TX_HEADER_ID
                               WHERE LOTTERY_TRANSACTION_TYPE  = 'VALIDATION') VAL ON
        (WAG.GLOBAL_TRANS_ID = VAL.GLOBAL_TRANS_ID AND WAG.SERIAL = VAL.SERIAL AND  V_I = VAL.START_DRAW_NUMBER) OR
        (WAG.CDC = VAL.CDC AND WAG.SERIAL = VAL.SERIAL AND THW.PLAYER_ID = VAL.PLAYER_ID AND WAG.GLOBAL_TRANS_ID != VAL.GLOBAL_TRANS_ID AND V_I = VAL.START_DRAW_NUMBER)
WHERE  WAG.LOTTERY_TX_HEADER_ID = V_LOTTERY_TX_HEADER_ID;
SET V_I = V_I + 1;
end while;
            INSERT INTO TXSTORE.TMP_TSO_OPEN_PAYMENT_TRANSACTION (TRANSACTION_ID,CHECK_DRAW_FROM,SD_OR_MD)
            VALUES (V_LOTTERY_TX_HEADER_ID,V_LAST_DRAWNUMBER+1,2);
end if;

            IF(V_COUNT_COMMIT = 10000) THEN
                SET V_COUNT_COMMIT = 1;
COMMIT ;
ELSE
                SET V_COUNT_COMMIT = V_COUNT_COMMIT + 1;
end if;
            SET V_SQLCODE = 0;
FETCH MIGRATED_TX_CURSOR INTO V_START_DRAW_NUMBER,V_END_DRAW_NUMBER,
    V_LOTTERY_TX_HEADER_ID,V_GLOBAL_TRANS_ID,V_SERIAL,V_CDC,V_PLAYER_ID,V_LAST_DRAWNUMBER;
IF (V_SQLCODE <> 0) THEN
                CALL SYSIBMADM.DBMS_OUTPUT.PUT_LINE(
                            'Finish reading the cursor.' || V_SQLCODE);
END IF;
END WHILE;
CLOSE MIGRATED_TX_CURSOR;
CALL SYSIBMADM.DBMS_OUTPUT.PUT_LINE('Close the "TSO_PURCHASE_CURSOR" cursor.');
END
@
