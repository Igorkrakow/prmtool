CREATE or replace PROCEDURE TXSTORE.TSO_PURCHASE_OPEN(start_time TIMESTAMP, end_time TIMESTAMP)
    LANGUAGE SQL
BEGIN
    DECLARE SQLCODE INT DEFAULT 0;
    DECLARE V_SQLCODE INT DEFAULT 0;

    DECLARE V_WAGER_LOTTERY_TX_HEADER_ID BIGINT;
    DECLARE V_PLAYER_ID BIGINT;
    DECLARE V_TRANSACTION_DATE TIMESTAMP;
    DECLARE V_UUID VARCHAR(200);
    DECLARE V_PRODUCT SMALLINT;
    DECLARE V_AMOUNT BIGINT;
    DECLARE V_GLOBAL_TRANS_ID VARCHAR(50);
    DECLARE V_START_DRAW_NUMBER VARCHAR(50);
    DECLARE V_END_DRAW_NUMBER VARCHAR(50);
    DECLARE V_STATUS VARCHAR(50);
    DECLARE V_DRAWNUMBER BIGINT;

    DECLARE V_COUNT_COMMIT BIGINT;


    DECLARE MIGRATED_TX_CURSOR CURSOR WITH HOLD FOR
SELECT
    LTHW.LOTTERY_TX_HEADER_ID,
    THW.PLAYER_ID EXTERNAL_ID,
    VARCHAR_FORMAT(LTHW.TRANSACTION_TIME_LOCAL,'YYYY-MM-DD HH24:MI:SS.FF3') EXTERNAL_TRANSACTION_DATE,
    THW.UUID EXTERNAL_TRANSACTION_ID, -- ticket number
    LTHW.PRODUCT GAME_CODE,
    NVL(LTHW.TRANSACTION_AMOUNT, 0) AMOUNT,
    LTHW.GLOBAL_TRANS_ID ROUND_ID,
    LTHW.START_DRAW_NUMBER,
    LTHW.END_DRAW_NUMBER,
    TXSTORE.LAST_CLOSED.DRAWNUMBER
FROM TXSTORE.LOTTERY_TX_HEADER LTHW
         JOIN TXSTORE.TX_HEADER THW ON THW.TX_HEADER_ID = LTHW.LOTTERY_TX_HEADER_ID
    AND LTHW.LOTTERY_TRANSACTION_TYPE = 'WAGER'
    AND TRANSACTION_TIME_LOCAL >= start_time AND TRANSACTION_TIME_LOCAL < end_time

         JOIN GIS.DGGAME ON LTHW.PRODUCT = GIS.DGGAME.HOSTPRODUCTNUMBER

-- Closed wagers only
         JOIN TXSTORE.LAST_CLOSED ON GIS.DGGAME.IDDGGAME = TXSTORE.LAST_CLOSED.IDDGGAME
    AND END_DRAW_NUMBER > TXSTORE.LAST_CLOSED.DRAWNUMBER;
-- Only migrate allowed player IDs
--JOIN PAM_CMD.SMS_CONTRACT_MIGRATION ON CONTRACT_IDENTITY = TXSTORE.TX_HEADER.PLAYER_ID

--where LOTTERY_TX_HEADER_ID not in (select WAGER_TRANSACTION_ID from TXSTORE.TMP_TSO_REFUND);



DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, NOT FOUND, SQLWARNING
        SET V_SQLCODE = SQLCODE;
OPEN MIGRATED_TX_CURSOR;
CALL SYSIBMADM.DBMS_OUTPUT.PUT_LINE('Open and start reading the "TSO_PURCHASE_CURSOR" cursor.');
FETCH MIGRATED_TX_CURSOR
    INTO V_WAGER_LOTTERY_TX_HEADER_ID, V_PLAYER_ID,
    V_TRANSACTION_DATE, V_UUID,
    V_PRODUCT ,V_AMOUNT, V_GLOBAL_TRANS_ID,V_START_DRAW_NUMBER,V_END_DRAW_NUMBER,V_DRAWNUMBER;
SET V_COUNT_COMMIT = 1;
    WHILE (V_SQLCODE = 0)
        DO
            SET V_STATUS = 'ISSUED';
            IF(V_START_DRAW_NUMBER != V_END_DRAW_NUMBER)
            THEN
                IF V_START_DRAW_NUMBER <= V_DRAWNUMBER
                THEN
                    SET V_STATUS = 'CLOSED';
                END IF ;
            END IF;
            INSERT INTO TXSTORE.TMP_TSO_PURCHASE (WAGER_TRANSACTION_ID, PLAYER_ID, STATUS,TRANSACTION_DATE,
            UUID, PRODUCT, AMOUNT, GLOBAL_TRANS_ID, START_DATE_RUN,
            END_DATE_RUN, START_DATE_UPDATE, END_DATE_UPDATE, DELTA)
            VALUES (V_WAGER_LOTTERY_TX_HEADER_ID,V_PLAYER_ID,V_STATUS,V_TRANSACTION_DATE,
                    V_UUID,V_PRODUCT,V_AMOUNT,V_GLOBAL_TRANS_ID,start_time,end_time,start_time,end_time,'i');
            IF(V_STATUS = 'ISSUED') THEN
            INSERT INTO TXSTORE.TMP_TSO_OPEN_TRANSACTION (TRANSACTION_ID)
            VALUES (V_WAGER_LOTTERY_TX_HEADER_ID);
            END IF;

IF(V_COUNT_COMMIT = 10000) THEN
                SET V_COUNT_COMMIT = 1;
COMMIT ;
ELSE
                SET V_COUNT_COMMIT = V_COUNT_COMMIT + 1;
end if;
            SET V_SQLCODE = 0;
FETCH MIGRATED_TX_CURSOR
    INTO V_WAGER_LOTTERY_TX_HEADER_ID, V_PLAYER_ID,
    V_TRANSACTION_DATE, V_UUID,
    V_PRODUCT ,V_AMOUNT, V_GLOBAL_TRANS_ID,V_START_DRAW_NUMBER,V_END_DRAW_NUMBER,V_DRAWNUMBER;
IF (V_SQLCODE <> 0) THEN
                CALL SYSIBMADM.DBMS_OUTPUT.PUT_LINE(
                            'Finish reading the cursor.' || V_SQLCODE);
END IF;
END WHILE;
CLOSE MIGRATED_TX_CURSOR;
CALL SYSIBMADM.DBMS_OUTPUT.PUT_LINE('Close the "TSO_PURCHASE_CURSOR" cursor.');
END
;

